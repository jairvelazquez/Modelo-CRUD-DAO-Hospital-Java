/*
 * Jair Velazquez https://github.com/jairvelazquez
 */
package Vistas;

import Idao.*;
import Dao.*;
import Modelo.*;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jair Velazquez
 */
public class VentanaPrincipal extends javax.swing.JFrame implements ActionListener{
    int ultimo;
    String itemActual;
    DefaultTableModel modelo;
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        modelo = new DefaultTableModel();
        this.setTitle("Sala de Urgencias CRUD");
        this.setSize(800,800);
        jLabel9.setText("");
        jLabel9.setIcon(new ImageIcon(getClass().getResource("logoHospital.jpg")));
        imagenes();
        listeners();
        agregaItems();
        ultimo=0;
        jButton4.setEnabled(false);
        jButton3.setEnabled(false);
        jButton5.setEnabled(false);
    }
    private void imagenes(){
        
        jButton7.setText("");
        jButton11.setText("");
        jButton15.setText("");
        jButton18.setText("");
        jButton21.setText("");
        jButton24.setText("");
        jButton2.setText("");
        jButton3.setText("");
        jButton4.setText("");
        jButton5.setText("");
        
        jButton7.setIcon(new ImageIcon(getClass().getResource("agregar.png")));
        jButton11.setIcon(new ImageIcon(getClass().getResource("agregar.png")));
        jButton15.setIcon(new ImageIcon(getClass().getResource("agregar.png")));
        jButton18.setIcon(new ImageIcon(getClass().getResource("mas.png")));
        jButton21.setIcon(new ImageIcon(getClass().getResource("mas.png")));
        jButton24.setIcon(new ImageIcon(getClass().getResource("mas.png")));
        jButton5.setIcon(new ImageIcon(getClass().getResource("diagnostico.png")));
        
        //segunda hilera 
          //jButton3.setIcon(new ImageIcon(getClass().getResource("eliminar.png")));
          jButton3.setIcon(new ImageIcon(getClass().getResource("menos.jpg")));
        
        //tercera hilera 
         jButton2.setIcon(new ImageIcon(getClass().getResource("buscar.jpg")));
        
        //cuarta hilera
         jButton4.setIcon(new ImageIcon(getClass().getResource("actualizar.jpg")));        
    }
    private void listeners(){
        jButton1.addActionListener(this);
        jButton7.addActionListener(this);
        jButton11.addActionListener(this);
        jButton15.addActionListener(this);
        jButton18.addActionListener(this);
        jButton21.addActionListener(this);
        jButton24.addActionListener(this);
        jButton2.addActionListener(this);
        jButton3.addActionListener(this);
        jButton4.addActionListener(this);
        jButton5.addActionListener(this);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton24 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial Black", 2, 24)); // NOI18N
        jLabel1.setText("Sala de Urgencias");

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel3.setText("Urgenciologos");

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel4.setText("Pacientes");

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel5.setText("Urgencias");

        jLabel6.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel6.setText("Especialistas");

        jLabel7.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel7.setText("Apoyos");

        jLabel8.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel8.setText("Enfermeros");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vistas/agregar.png"))); // NOI18N

        jButton7.setText("jButton1");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton11.setText("jButton1");

        jButton15.setText("jButton1");

        jButton18.setText("jButton1");

        jButton21.setText("jButton1");

        jLabel9.setText("jLabel9");

        jLabel10.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel10.setText("Departamentos");

        jButton24.setText("jButton1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("jButton2");

        jButton3.setText("jButton3");

        jButton4.setText("jButton4");

        jButton5.setText("jButton4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton15)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton18)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton21)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton24))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton7)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton11))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton2)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton3)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton5)))))
                        .addGap(58, 58, 58))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7)
                            .addComponent(jButton11)
                            .addComponent(jButton15)
                            .addComponent(jButton18)
                            .addComponent(jButton21)
                            .addComponent(jButton24))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(jButton5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    private void agregaItems(){
        jComboBox1.addItem("Paciente");
        jComboBox1.addItem("Urgencia");
        jComboBox1.addItem("Urgenciologo");
        jComboBox1.addItem("Enfermero");
        jComboBox1.addItem("Especialista");
        jComboBox1.addItem("Departamento");
        jComboBox1.addItem("Apoyo");
    }
    @Override
    public void actionPerformed(ActionEvent ae) {
        Object entrada = ae.getSource();
        
        if(entrada.equals(jButton1)){//se desea agregar un paciente
            new FormAddPacient().setVisible(true);
        }
        else if(entrada.equals(jButton7)){//se desea agregar un enfermero
            new FormAddNurse().setVisible(true);
        }
        else if(entrada.equals(jButton11)){//se va agregar un urgenciologo
            new FormAddUrgenciologo().setVisible(true);
        }
        else if(entrada.equals(jButton15)){//se va agregar un especialista
            new FormAddSpecialist().setVisible(true);
        }
        else if(entrada.equals(jButton18)){//se va agregar una nueva urgencia
            new FormAddUrgencia().setVisible(true);
        }
        else if(entrada.equals(jButton21)){//se agregara un apoyo enfermero
            new FormAddApoyo().setVisible(true);
        }
        else if(entrada.equals(jButton24)){//se agregara un departamento
            new FormAddDepartment().setVisible(true);
        }
        else if(entrada.equals(jButton2)){//si se desea buscar
            jButton3.setEnabled(false);
            jButton4.setEnabled(false);
            jButton5.setEnabled(false);
            String itemActual = (String) jComboBox1.getSelectedItem();
            switch(itemActual){
                case "Paciente":buscaPaciente();
                    break;
                case "Departamento":buscaDepartamento();
                    break;
                case "Enfermero":buscaEnfermero();
                    break;
                case "Especialista":buscaEspecialista();
                    break;
                case "Urgenciologo":buscaUrgenciologo();
                    break;
                case "Urgencia" :buscarUrgencia();
                    break;
                case "Apoyo":buscaApoyo();
                    break;
            }
        }
        else if(entrada.equals(jButton3)){//si se desea eliminar
            int fila = jTable1.getSelectedRow();
            String itemActual = (String) jComboBox1.getSelectedItem();
            switch(itemActual){
                case "Paciente":eliminaPaciente(fila);
                    break;
                case "Departamento":eliminaDepartamento(fila);
                    break;
                case "Enfermero":eliminaEnfermero(fila);
                    break;
                case "Especialista":eliminaEspecialista(fila);
                    break;
                case "Urgenciologo":eliminaUrgenciologo(fila);
                    break;
            }
        }
        else if(entrada.equals(jButton4)){//si se desea atualizar
            int fila = jTable1.getSelectedRow();
            String itemActual = (String) jComboBox1.getSelectedItem();
            switch(itemActual){
                case "Paciente":actualizaPaciente(fila);
                    break;
                case "Departamento":actualizaDepartamento(fila);
                    break;
                case "Enfermero":actualizaEnfermero(fila);
                    break;
                case "Especialista":actualizaEspecialista(fila);
                    break;
                case "Urgenciologo":actualizaUrgenciologo(fila);
                    break;
                case "Urgencia":System.out.println("se quiere ctualizar urgencia");actualizaUrgencia(fila);
            }
        }
        else if(entrada.equals(jButton5)){//se desea buscar un diagnostico
            int id =Integer.parseInt((String)jTable1.getValueAt(jTable1.getSelectedRow(), 9));
            if(id==0)JOptionPane.showMessageDialog(this, "No tiene diagnosticos asignados");
            else{
                IDiagnosticoDAO dao= new DiagnosticoDaoImpl();
                Diagnostico diagnostico = dao.obtenerID(id);
                
                modelo = new DefaultTableModel();
                modelo.addColumn("id Diagnostico");
                modelo.addColumn("Nombre Paciente");
                modelo.addColumn("Apellido Paciente");
                modelo.addColumn("Gravedad");
                modelo.addColumn("Nombre Especialista");
                modelo.addColumn("Apellido Especialista");
                modelo.addColumn("Nombre Departamento");
                    String[] datosDiagnostico = {
                        
                    String.valueOf(diagnostico.getId()),
                    diagnostico.getNombrePaciente(),
                    diagnostico.getApellidoPaciente(),
                    diagnostico.getGravedad(),
                    diagnostico.getNombreEspecialista(),
                    diagnostico.getApellidoEspecialista(),
                    diagnostico.getNombreDepartamento()
                };
                modelo.addRow(datosDiagnostico);
                jTable1.setModel(modelo);
            }      
        }
    }
    private void buscaPaciente(){
        String[] opciones ={
            "id","nombre","apellido1","apellido2","sexo","edad","tipo_sangre","telefono"
        };
        String respuesta = (String) JOptionPane.showInputDialog(null,"Seleccione el criterio a buscar","Criterio"
                + "",JOptionPane.DEFAULT_OPTION,null,opciones,opciones[0]);
        
        String opcion = (String) JOptionPane.showInputDialog(this,"Ingrese el valor a buscar");
        
        List<Paciente> pacientes = new ArrayList<Paciente>();
	IPacienteDAO dao = new  PacienteDaoImpl();
	pacientes = dao.getPacientes(respuesta, opcion);
        
        modelo = new DefaultTableModel();
        modelo.addColumn("id");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido Paterno");
        modelo.addColumn("Apellido Materno");
        modelo.addColumn("sexo");
        modelo.addColumn("edad");
        modelo.addColumn("Tipo de Sangre");
        modelo.addColumn("Telefono");
        
        for(Paciente paciente:pacientes){
            String[] datosPaciente = {
                String.valueOf(paciente.getId()),
                paciente.getNombre(),paciente.getApellido1(),
                paciente.getApellido2(),paciente.getSexo(),
                String.valueOf(paciente.getEdad()),paciente.getTipo_sangre(),
                paciente.getTelefono()
            };
            modelo.addRow(datosPaciente);
        }
        if(modelo.getRowCount()>0){//si se encontraron elementos que podran ser seleccionados
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
        }
        jTable1.setModel(modelo);
    }
    private void eliminaPaciente(int fila){
        int id = Integer.parseInt((String)jTable1.getValueAt(fila, 0));//se obtiene el id
        Paciente paciente = new Paciente();
        paciente.setId(id);
        IPacienteDAO dao= new PacienteDaoImpl();
        dao.eliminar(paciente);
    }
    private void actualizaPaciente(int fila){
        int id = Integer.parseInt((String)jTable1.getValueAt(fila, 0));//se obtiene el id
        String nombre = String.valueOf(jTable1.getValueAt(fila,1));
        String ap1 = String.valueOf(jTable1.getValueAt(fila,2));
        String ap2 = String.valueOf(jTable1.getValueAt(fila,3));
        String  sexo = String.valueOf(jTable1.getValueAt(fila,4));
        int edad = Integer.valueOf(String.valueOf(jTable1.getValueAt(fila,5)));
        String tipoSangre = String.valueOf(jTable1.getValueAt(fila,6));
        String telefono = String.valueOf(jTable1.getValueAt(fila,7));
        new ActualizarPaciente(id,nombre,ap1,ap2,sexo,edad,tipoSangre,telefono).setVisible(true);
    }
    private void buscaDepartamento(){
        String[] opciones ={
            "id","nombre_departamento"
        };
        String respuesta = (String) JOptionPane.showInputDialog(null,"Seleccione el criterio a buscar","Criterio"
                + "",JOptionPane.DEFAULT_OPTION,null,opciones,opciones[0]);
        
        String opcion = (String) JOptionPane.showInputDialog(this,"Ingrese el valor a buscar");
        
        List<Departamento> departamentos = new ArrayList<Departamento>();
	IDepartamentoDAO dao = new  DepartamentoDaoImpl();
	departamentos = dao.getDepartamentos(respuesta, opcion);
        
        modelo = new DefaultTableModel();
        modelo.addColumn("id");
        modelo.addColumn("Nombre");
        
        for(Departamento departamento:departamentos){
            String[] datosDepartamento = {
                String.valueOf(departamento.getId()),
                departamento.getNombreDepartamento()
            };
            modelo.addRow(datosDepartamento);
        }
        if(modelo.getRowCount()>0){//si se encontraron elementos que podran ser seleccionados
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
        }
        jTable1.setModel(modelo);
    }
    private void eliminaDepartamento(int fila){
        int id = Integer.parseInt((String)jTable1.getValueAt(fila, 0));//se obtiene el id
        Departamento departamento = new Departamento();
        departamento.setId(id);
        IDepartamentoDAO dao= new DepartamentoDaoImpl();
        dao.eliminar(departamento);
    }
    private void actualizaDepartamento(int fila){
        int id = Integer.parseInt((String)jTable1.getValueAt(fila, 0));//se obtiene el id
        String nombre = String.valueOf(jTable1.getValueAt(fila,1));
        new ActualizarDepartamento(id,nombre).setVisible(true);
    }
    private void buscaEnfermero(){
        String[] opciones ={
            "id","nombre","apellido1","apellido2","antiguedad"
        };
        String respuesta = (String) JOptionPane.showInputDialog(null,"Seleccione el criterio a buscar","Criterio"
                + "",JOptionPane.DEFAULT_OPTION,null,opciones,opciones[0]);
        
        String opcion = (String) JOptionPane.showInputDialog(this,"Ingrese el valor a buscar");
        
        List<Enfermero> enfermeros = new ArrayList<Enfermero>();
	IEnfermeroDAO dao = new  EnfermeroDaoImpl();
	enfermeros = dao.getEnfermeros(respuesta, opcion);
        
        modelo = new DefaultTableModel();
        modelo.addColumn("id");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido Paterno");
        modelo.addColumn("Apellido Materno");
        modelo.addColumn("Antiguedad");
        
        for(Enfermero enfermero:enfermeros){
            String[] datosEnfermero = {
                String.valueOf(enfermero.getId()),
                enfermero.getNombre(),enfermero.getApellido1(),
                enfermero.getApellido2(),
                String.valueOf(enfermero.getAntiguedad())
            };
            modelo.addRow(datosEnfermero);
        }
        if(modelo.getRowCount()>0){//si se encontraron elementos que podran ser seleccionados
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
        }
        jTable1.setModel(modelo);
    }
    private void eliminaEnfermero(int fila){
        int id = Integer.parseInt((String)jTable1.getValueAt(fila, 0));//se obtiene el id
        Enfermero enfermero = new Enfermero();
        enfermero.setId(id);
        IEnfermeroDAO dao= new EnfermeroDaoImpl();
        dao.eliminar(enfermero);
    }
    private void actualizaEnfermero(int fila){
        int id = Integer.parseInt((String)jTable1.getValueAt(fila, 0));//se obtiene el id
        String nombre = String.valueOf(jTable1.getValueAt(fila,1));
        String ap1 = String.valueOf(jTable1.getValueAt(fila,2));
        String ap2 = String.valueOf(jTable1.getValueAt(fila,3));
        int antiguedad = Integer.valueOf(String.valueOf(jTable1.getValueAt(fila,4)));
        new ActualizaEnfermero(id,nombre,ap1,ap2,antiguedad).setVisible(true);
    }
    private void buscaEspecialista(){
        String[] opciones ={
            "id","id_departamento","nombre","apellido1","apellido2","especialidad","antiguedad_años"
        };
        String respuesta = (String) JOptionPane.showInputDialog(null,"Seleccione el criterio a buscar","Criterio"
                + "",JOptionPane.DEFAULT_OPTION,null,opciones,opciones[0]);
        
        String opcion = (String) JOptionPane.showInputDialog(this,"Ingrese el valor a buscar");
        
        List<Especialista> especialistas = new ArrayList<Especialista>();
	IEspecialistaDAO dao = new  EspecialistaDaoImpl();
	especialistas = dao.getEspecialistas(respuesta, opcion);
        
        modelo = new DefaultTableModel();
        modelo.addColumn("id");
        modelo.addColumn("Departamento");
        modelo.addColumn("Especialidad");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido Paterno");
        modelo.addColumn("Apellido Materno");
        modelo.addColumn("Antiguedad");
        
        for(Especialista especialista:especialistas){
            String[] datosEspecialista = {
                String.valueOf(especialista.getId()),
                String.valueOf(especialista.getId_departamento()),
                especialista.getEspecialidad(),
                especialista.getNombre(),
		        especialista.getApellido1(),especialista.getApellido2(),
                String.valueOf(especialista.getAntiguedad())
            };
            modelo.addRow(datosEspecialista);
        }
        if(modelo.getRowCount()>0){//si se encontraron elementos que podran ser seleccionados
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
        }
        jTable1.setModel(modelo);
    }
    private void eliminaEspecialista(int fila){
        int id = Integer.parseInt((String)jTable1.getValueAt(fila, 0));//se obtiene el id
        Especialista especialista = new Especialista();
        especialista.setId(id);
        IEspecialistaDAO dao= new EspecialistaDaoImpl();
        dao.eliminar(especialista);
    }
    private void actualizaEspecialista(int fila){
        int id = Integer.parseInt((String)jTable1.getValueAt(fila, 0));//se obtiene el id
        int idDepartamento = Integer.parseInt((String)jTable1.getValueAt(fila, 1));
        String especialidad = String.valueOf(jTable1.getValueAt(fila,2));
	String nombre = String.valueOf(jTable1.getValueAt(fila,3));
        String ap1 = String.valueOf(jTable1.getValueAt(fila,4));
        String ap2 = String.valueOf(jTable1.getValueAt(fila,5));
        int antiguedad = Integer.valueOf(String.valueOf(jTable1.getValueAt(fila,6)));
        new ActualizaEspecialista(id,idDepartamento,especialidad,nombre,ap1,ap2,antiguedad).setVisible(true);
    }
    private void buscaUrgenciologo(){
        String[] opciones ={
            "id","nombre","apellido1","apellido2","antiguedad_años"
        };
        String respuesta = (String) JOptionPane.showInputDialog(null,"Seleccione el criterio a buscar","Criterio"
                + "",JOptionPane.DEFAULT_OPTION,null,opciones,opciones[0]);
        
        String opcion = (String) JOptionPane.showInputDialog(this,"Ingrese el valor a buscar");
        
        List<Urgenciologo> urgenciologos = new ArrayList<Urgenciologo>();
	IUrgenciologoDAO dao = new  UrgenciologoDaoImpl();
	urgenciologos = dao.getUrgenciologos(respuesta, opcion);
        
        modelo = new DefaultTableModel();
        modelo.addColumn("id");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido Paterno");
        modelo.addColumn("Apellido Materno");
        modelo.addColumn("Antiguedad");
        
        for(Urgenciologo urgenciologo:urgenciologos){
            String[] datosUrgenciologo = {
                String.valueOf(urgenciologo.getId()),
                urgenciologo.getNombre(),urgenciologo.getApellido1(),
                urgenciologo.getApellido2(),
                String.valueOf(urgenciologo.getAntiguedad())
            };
            modelo.addRow(datosUrgenciologo);
        }
        if(modelo.getRowCount()>0){//si se encontraron elementos que podran ser seleccionados
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
        }
        jTable1.setModel(modelo);
    }
    private void eliminaUrgenciologo(int fila){
        int id = Integer.parseInt((String)jTable1.getValueAt(fila, 0));//se obtiene el id
        Urgenciologo urgenciologo = new Urgenciologo();
        urgenciologo.setId(id);
        IUrgenciologoDAO dao= new UrgenciologoDaoImpl();
        dao.eliminar(urgenciologo);
    }
    private void actualizaUrgenciologo(int fila){
        int id = Integer.parseInt((String)jTable1.getValueAt(fila, 0));//se obtiene el id
        String nombre = String.valueOf(jTable1.getValueAt(fila,1));
        String ap1 = String.valueOf(jTable1.getValueAt(fila,2));
        String ap2 = String.valueOf(jTable1.getValueAt(fila,3));
        int antiguedad = Integer.valueOf(String.valueOf(jTable1.getValueAt(fila,4)));
        new ActualizarUrgenciologo(id,nombre,ap1,ap2,antiguedad).setVisible(true);
    }
    private void buscaApoyo(){
        String[] opciones ={
           "id_enfermero","id_urgencia"
        };
        String respuesta = (String) JOptionPane.showInputDialog(null,"Seleccione el criterio a buscar","Criterio"
                + "",JOptionPane.DEFAULT_OPTION,null,opciones,opciones[0]);
        
        String opcion = (String) JOptionPane.showInputDialog(this,"Ingrese el valor a buscar");
        
        List<ApoyoEnfermero> apoyos = new ArrayList<ApoyoEnfermero>();
	IApoyoEnfermeroDAO dao = new  ApoyoEnfermeroDaoImpl();
	apoyos = dao.getApoyoEnfermero(respuesta, opcion);
        
        modelo = new DefaultTableModel();
        modelo.addColumn("id Urgencia");
        modelo.addColumn("Nombre Paciente");
        modelo.addColumn("Apellido Paciente");
        modelo.addColumn("Nombre Enfermero");
        modelo.addColumn("Apellido Enfermero");

        for(ApoyoEnfermero apoyo:apoyos){
            String[] datosApoyo = {
                String.valueOf(apoyo.getId_urgencia()),
                apoyo.getNombrePaciente(),apoyo.getApellidoPaciente(),
                apoyo.getNombreEnfermero(),
                apoyo.getApellidoEnfermero()
            };
            modelo.addRow(datosApoyo);
        }
        if(modelo.getRowCount()>0){//si se encontraron elementos que podran ser seleccionados
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
        }
        jTable1.setModel(modelo);
    }
    private void buscarUrgencia(){
        String[] opciones ={
            "id","id_paciente","id_urgenciologo","id_diagnostico","numero_cama",
            "fecha_ingreso","fecha_salida","causa"
        };
        String respuesta = (String) JOptionPane.showInputDialog(null,"Seleccione el criterio a buscar","Criterio"
                + "",JOptionPane.DEFAULT_OPTION,null,opciones,opciones[0]);
        
        String opcion = (String) JOptionPane.showInputDialog(this,"Ingrese el valor a buscar");
        
        List<Urgencia> urgencias = new ArrayList<Urgencia>();
	IUrgenciaDAO dao = new  UrgenciaDaoImpl();
	urgencias = dao.getUrgencias(respuesta, opcion);
        
        modelo = new DefaultTableModel();
        modelo.addColumn("id");
        modelo.addColumn("Nombre Paciente");
        modelo.addColumn("Apellido Paciente");
        modelo.addColumn("Cama");
        modelo.addColumn("Causa");
        modelo.addColumn("Nombre Urgenciologo");
        modelo.addColumn("Apellido Urgenciologo");
        modelo.addColumn("Fecha Ingreso");
        modelo.addColumn("Fecha Salida");
        modelo.addColumn("id Diagnostico");
        modelo.addColumn("id_paciente");
        modelo.addColumn("id_urgenciologo");
        for(Urgencia urgencia:urgencias){
            String[] datosUrgencias = {
                String.valueOf(urgencia.getId()),
                urgencia.getNombrePaciente(),
                urgencia.getApellidoPaciente(),
                urgencia.getCamilla(),
                urgencia.getCausa(),
                urgencia.getNombreUrgenciologo(),
                urgencia.getApellidoUrgenciologo(),
                urgencia.getDateTimeIngreso(),
                urgencia.getDateTimeSalida(),
                String.valueOf(urgencia.getId_diagnostico()),
                String.valueOf(urgencia.getId_paciente()),
                String.valueOf(urgencia.getId_urgenciologo())
            };
            modelo.addRow(datosUrgencias);
            jTable1.setModel(modelo);
        }
        if(modelo.getRowCount()>0){//si se encontraron elementos que podran ser seleccionados
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
        }
        jTable1.setModel(modelo);
        jButton5.setEnabled(true);
    }    
    public void actualizaUrgencia(int fila){
        int id = Integer.parseInt((String)jTable1.getValueAt(fila, 0));//se obtiene el id
        int idPaciente = Integer.parseInt((String)jTable1.getValueAt(fila, 10));
        int idUrgenciologo = Integer.parseInt((String)jTable1.getValueAt(fila, 11));
        int idDiagnostico = Integer.parseInt((String)jTable1.getValueAt(fila, 9));
        String numeroCama = (String) jTable1.getValueAt(fila, 3);
        String fechaIngreso =(String) jTable1.getValueAt(fila, 7);
        String fechaSalida= (String) jTable1.getValueAt(fila, 8);
        String causa =(String) jTable1.getValueAt(fila, 4);
        new ActualizaUrgencia(id,idPaciente,idUrgenciologo,idDiagnostico,numeroCama,fechaIngreso,fechaSalida,causa).setVisible(true);
    }
}
